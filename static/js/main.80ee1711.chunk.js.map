{"version":3,"sources":["cardList.js","SearchBox.js","ErrorBoundry.js","scroll.js","App.js","reportWebVitals.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchChange","searchFeild","className","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","height","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4OAsBeA,EAnBC,SAAC,GAAW,EAAVC,OAEV,MAAM,IAAIC,MAAO,gBCUVC,EAbE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,aAA8B,EAAfC,YAClC,OAEA,qBAAKC,UAAU,MAAf,SAEA,uBAAOA,UAAU,mCAAoCC,KAAK,SAASC,YAAY,gBAAgBC,SAAUL,OCuB1FM,E,kDA3BX,WAAYC,GACX,IAAD,8BACI,cAAMA,IACDC,MAAO,CACRC,UAAS,GAHjB,E,qDAQA,SAAkBC,EAAQC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAG5B,WACI,OAAIG,KAAKJ,MAAMC,SAEJ,gEAGAG,KAAKL,MAAMO,a,GApBHC,aCaZC,EAbA,SAACT,GACZ,OACI,qBAAKU,MAAO,CAACC,UAAU,SAAWC,OAAQ,SAA1C,SACCZ,EAAMO,YCwDAM,E,kDApDb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GAChB,EAAKT,SAAS,CAACU,YAAaD,EAAME,OAAOC,SAdzC,EAAKjB,MAAM,CACTX,OAAO,GACP0B,YAAY,IAJH,E,qDAQb,WACC,IAAD,OACEG,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UACpCF,MAAK,SAAAG,GAAU,EAAKjB,SAAS,CAAChB,OAAOiC,S,oBAQtC,WAAU,IAAD,OACDC,EAAenB,KAAKJ,MAAMX,OAAOmC,QAAO,SAAAnC,GAC1C,OAAOA,EAAOoC,KAAKC,cAAcC,SAAS,EAAK3B,MAAMe,YAAYW,kBAGvE,OAAiC,IAA7BtB,KAAKJ,MAAMX,OAAOuC,OAEb,oBAAIlC,UAAU,KAAd,0BAIL,sBAAKA,UAAU,MAAf,UACA,6CACA,cAAC,EAAD,CAAWF,aAAcY,KAAKS,iBAC/B,cAAC,EAAD,UACE,cAAC,EAAD,UACA,cAAC,EAAD,CAAUxB,OAAQkC,e,GArCPhB,aCIHsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAAO,cAAC,EAAD,IACZC,SAASC,eAAe,SAK5BX,M","file":"static/js/main.80ee1711.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './card.js';\r\n\r\nconst CardList =({robots})=>{\r\n    if(true){\r\n        throw new Error ('NOOOOOOOOOO');\r\n    }\r\n    return (\r\n<div>\r\n{robots.map((user,i) => {return (\r\n        <Card \r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email} \r\n        phone ={robots[i].phone}\r\n        />\r\n);})}\r\n</div>\r\n      \r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange , searchFeild})=>{\r\nreturn (\r\n\r\n<div className='pa2'>\r\n\r\n<input className='pa3 ba b--green bg-lightest-blue'  type='search' placeholder='search robots' onChange={searchChange} />\r\n\r\n</div>\r\n\r\n);\r\n    \r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error , info ){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError)\r\n        {\r\n            return <h1> Oooops . That is not good :( </h1>\r\n        }\r\n        else{\r\n            return this.props.children \r\n        }\r\n \r\n\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry ;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll' , height: '900px' ,}}>\r\n        {props.children}\r\n        </div>\r\n    \r\n    ) ;\r\n\r\n};\r\n\r\n   \r\n\r\n\r\nexport default Scroll;\r\n","import React , {Component} from 'react';\nimport './App.css';\nimport CardList from './cardList.js';\nimport SearchBox from './SearchBox.js'\n import ErrorBoundry from './ErrorBoundry.js'\nimport Scroll from './scroll.js'\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      robots:[], \n      searchfield:''\n    }\n  }\n\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {return response.json()})\n  .then(users => {this.setState({robots:users})});\n  \n  }\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n\n  \n  render() {\n    const filterRobots = this.state.robots.filter(robots=>\n      { return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n      }) \n    \n  if (this.state.robots.length === 0)\n  {\n    return <h1 className=\"tc\"> Loading... </h1>\n  }\n  else{\n    return (\n      <div className='tc '>\n      <h1 >RoboFreinds</h1>\n      <SearchBox searchChange={this.onSearchChange}/>\n     <Scroll>\n       <ErrorBoundry>\n       <CardList robots={filterRobots}/>\n\n       </ErrorBoundry>\n          \n     </Scroll>\n     \n\n      </div>\n      \n    );\n    \n  }\n    \n  }\n}\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App/>\n  , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}